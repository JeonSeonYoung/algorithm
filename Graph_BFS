/*
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>

#define MAX_VERTEX 5

typedef struct _Vertex {
int vertex;
struct _Vertex *next;
}Vertex;

typedef struct _linkedlist {
struct _Vertex *head;
struct _Vertex *cur;
struct _Vertex *tail;
}linkedlist;


typedef struct _Graph {
linkedlist *list[MAX_VERTEX];
}Graph;

void InitGraph(Graph *g);
void DeleteGraph(Graph *g);
void addEdge(Graph *g,int vertex1,int vertex2);
void ViewVertexLink(Graph *g);
int main(void)
{
Graph *graph = (Graph *)malloc(sizeof(graph));

InitGraph(graph);

addEdge(graph, 0, 2);
addEdge(graph, 0, 3);
addEdge(graph, 1, 3);
addEdge(graph, 1, 4);
addEdge(graph, 2, 4);

ViewVertexLink(graph);

DeleteGraph(graph);

return 0;
}

void InitGraph(Graph *g)
{
int i;

g = (Graph *)malloc(sizeof(Graph));
for (i = 0; i < MAX_VERTEX; i++) {
g->list[i] = (linkedlist *)malloc(sizeof(linkedlist));
g->list[i]->head = NULL;
g->list[i]->cur = NULL;
g->list[i]->tail = NULL;
}
}

void DeleteGraph(Graph *g)
{
int i;

for (i = 0; i < MAX_VERTEX; i++)
free(g->list[i]);

free(g);

}
void addEdge(Graph *g, int vertex1, int vertex2)
{
g->list[vertex1]->cur = (Vertex *)malloc(sizeof(Vertex));
g->list[vertex1]->cur->vertex = vertex2;

if (g->list[vertex1]->head == NULL){
g->list[vertex1]->cur->next = NULL;
g->list[vertex1]->head = g->list[vertex1]->tail = g->list[vertex1]->cur;
}
else if (g->list[vertex1]->head == g->list[vertex1]->tail) {
g->list[vertex1]->head->next = g->list[vertex1]->cur;
g->list[vertex1]->tail = g->list[vertex1]->cur;
}
else {
g->list[vertex1]->cur->next = g->list[vertex1]->tail;
}

}
void ViewVertexLink(Graph *g)
{
Vertex *temp;
int i;
for (i = 0; i < MAX_VERTEX; i++) {
temp = g->list[i]->head;
while (temp) {
printf("%d->", temp->vertex);
temp = temp->next;
}
}
}
*/
////////////////

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <memory.h>

//연결리스트는 각 정점마다 하나의 연결리스트가 필요. 따라서 정점의 개수 만큼의 포인터 배열이 필요하므로 포인터 배열의 이름을 adj_listfkrh 하고 연결 리스트의 하나의 노드를 GraphNode라는 구조체를 이용하여 나타낸다.

#define MAX_VERTICES 50

int result_node[MAX_VERTICES];
int index = 0;

typedef struct _GraphNode {
	int vertex;
	struct _GraphNode *next;
	int visited;
}GraphNode;

typedef struct GraphType {
	int n;  //정점의 개수
	GraphNode *adj_list[MAX_VERTICES];
}GraphType;

typedef struct _Queue {
	int front[MAX_VERTICES];
	int rear[MAX_VERTICES];
	int root_ck[MAX_VERTICES] = { 1 };
}Queue;

//int queue[1001];

int dequeue_ck(Queue *q);

void graph_init(GraphType *g);

void insert_vertex(GraphType *g, int v);

void insert_edge(GraphType *g, int start, int end);

void Graph_Display(GraphType *g);

int Queue_init(Queue *q);

int Select_bfs(GraphType* g, Queue* q);

//void BFS(int v, int N);

int main(void)

{
	int i, ret = 0;

	GraphType g;
	Queue q;

	ret = Queue_init(&q);
	if (ret < 0) {
		printf("Queue Create ERROR\n");
		exit(0);
	}
	

	graph_init(&g);

	//정점삽입

	for (i = 0; i<4; i++)
		insert_vertex(&g, i);

	insert_edge(&g, 0, 1);

	insert_edge(&g, 0, 2);

	insert_edge(&g, 0, 3);

	insert_edge(&g, 1, 2);

	insert_edge(&g, 2, 3);


	Select_bfs(&g, &q);

//	for (i = 0; i < MAX_VERTICES; i++)
	//	printf("%d->", result_node[i]);
	//Graph_Display(&g);

	//	g->visited[u] = 1;


	//	while (!(isEmpty())
	//	printf("%d ",dequeue());

	free)

}

int Select_bfs(GraphType *g, Queue *q)
{
	int i, j = 0;
	int ret = 0;



	for (i = 0; i < MAX_VERTICES;)
	{
		//printf("Node Name[%c]\n", g->adj_list[i]->vertex + 65);
		while (1) {
			if (g->adj_list[i]->vertex == 0) {
				g->adj_list[i]->visited =1;
			}
			if (g->adj_list[i]->visited == 0)
			{
				q->rear[j++] = g->adj_list[i]->vertex;
				g->adj_list[i]->visited =1;
			}
			if (g->adj_list[i]->next == NULL) {
				ret = dequeue_ck(q);
				 
				printf("Node Name Return[%c]\n", ret + 65);
				break;
			}
			g->adj_list[i] = g->adj_list[i]->next;
		}

		//g->adj_list[i] = g->adj_list[i]->next;
		i = ret;
	}
	//g->adj_list[0]->next;

	return 0;
}

int dequeue_ck(Queue *q)
{
	int i;

	for (i = 0; i < MAX_VERTICES; i++)
	{

		if (q->rear[i] != -1) {
			result_node[index++] = q->rear[i];

		}
		if (q->root_ck[i] == -1)
		{
			q->root_ck[i] = 1;
			return q->rear[i];
		}
		
	}

	/*
	for (i = 0; i < MAX_VERTICES; i++)
	{
		if (q->root_ck[i] == -1)
		{
			q->root_ck[i] = 1;
			return q->rear[i];
		}
	}
	*/

	return -1;
}

int Queue_init(Queue *q)
{
	//q = (Queue *)calloc(1, sizeof(Queue));
	int i;

	for (i = 0; i < MAX_VERTICES; i++) {
		q->rear[i] = -1;
		q->root_ck[i] = -1;
	}

	/*
	if (q == NULL)
	{
	printf("Queue Calloc Fail\n");
	return -1;
	}
	*/
	//q->front = q->rear;
	return 0;
}


/*
void Queue_init(Queue *q) {
q->front = q->rear = NULL;
q->len = 0;
}
*/

//그래프 초기화
void graph_init(GraphType *g)

{
	int v;

	g->n = 0;

	for (v = 0; v<MAX_VERTICES; v++)
		g->adj_list[v] = NULL;
}

//정점 삽입 연산-정점을 삽입하는 연산은 n을 하나 증가하면 된다. 정점의 번호는 순차적으로 증가한다고 가정한다.
void insert_vertex(GraphType *g, int v)
{
	if (((g->n) + 1) > MAX_VERTICES) {
		printf("\n그래프 : 정점의 개수 초과");
		return;
	}
	g->n++;
}

/*간선 삽입 연산 -정점u에 간선(u,v)를 삽입하는 연산은 정점 u의 인접 리스트에 간선을 나타내는 노드를 하나 생성하여 삽입하면 된다.
위치는 상관이 없으므로 삽입을 쉽게 하기 위하여 연결 리스트의 맨 처음에 삽입하자.
adj_ist[u]는 초기값이 null이라고 가정.*/
void insert_edge(GraphType *g, int u, int v)
{

	GraphNode *node, *vnode;

	if (u >= g->n || v >= g->n) {
		printf("\n그래프 : 정점번호 오류");
		return;
	}

	node = (GraphNode *)malloc(sizeof(GraphNode));
	node->vertex = v;
	node->next = g->adj_list[u];

	g->adj_list[u] = node;
	g->adj_list[u]->visited = 0;
	//두 방향을 다 연결시키려고 하기 때문에 vnode를 사용한다. (u와 v를 서로연결)

	//한방향만 한다면 vnode를 안쓰면 된다.
	vnode = (GraphNode*)malloc(sizeof(GraphNode));

	vnode->vertex = u;
	vnode->next = g->adj_list[v];
	g->adj_list[v] = vnode;
	g->adj_list[v]->visited = 0;
	//	g->adj_list[v]->visited = 1;

}

//그래프 출력
void Graph_Display(GraphType *g)
{
	int i;
	GraphNode *tmp;
	for (i = 0; i < g->n; i++) {         //순차적이라서 g->n 이라고 한것이다. 순차적이지 않을땐 생각!!!
		printf("\n\t정점 %c의 인접리스트", i + 65);
		tmp = g->adj_list[i];
		while (tmp != NULL) {
			printf("->%c ", tmp->vertex + 65);//정점 0~4를 A~D로 출력
											  //		printf("g_adj_list[%d]->visited =%d ",i, tmp->visited);//정점 0~4를 A~D로 출력
			tmp = tmp->next;
		}
		printf("\n");
	}
}
/*
void BFS(int v, int N) {
int front = 0, rear = 0, Pop, i;

printf("%d ", v);
queue[0] = v;
rear++;
BFSvisit[v] = 1;

while (front < rear) {
Pop = queue[front];
front++;

for (i = 1; i <= N; i++) {
if (Graph[Pop][i] == 1 && BFSvisit[i] == 0) {
printf("%d ", i);
queue[rear] = i;
rear++;
BFSvisit[i] = 1;
}
}

}
}
*/
/*
void enqueue(int data) {
GraphNode *node = (GraphNode*)malloc(sizeof(GraphNode));
node->vertex = data;
node->next = NULL;
if (isEmpty()) {
front = rear = node;
}
else {
rear->next = node;
rear = rear->next;
}
len++;
}

int dequeue() {

if (isEmpty()) {
cout << "Q is empty" << endl;
return INF;
}

GrpahNode *delNode = front;
int ret = delNode->data;
front = delNode->next;
free(delNode);
len--;
return ret;
}
*/
