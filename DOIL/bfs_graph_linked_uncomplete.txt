#include <stdio.h>
#include <stdlib.h>
#include <memory.h>

//연결리스트는 각 정점마다 하나의 연결리스트가 필요. 따라서 정점의 개수 만큼의 포인터 배열이 필요하므로 포인터 배열의 이름을 adj_listfkrh 하고 연결 리스트의 하나의 노드를 GraphNode라는 구조체를 이용하여 나타낸다.

#define MAX_VERTICES 50

typedef struct _GraphNode{
	int vertex;
	struct _GraphNode *next;
}GraphNode;

typedef struct GraphType {
	int n;  //정점의 개수
	GraphNode *adj_list[MAX_VERTICES];
	int BFSvisit[1001] = { 0 };
}GraphType;

typedef struct _Queue {
	GraphNode *front;
	GraphNode *rear;
	int len;
}Queue;

//int queue[1001];


void graph_init(GraphType *g);

void insert_vertex(GraphType *g, int v);

void insert_edge(GraphType *g, int start, int end);

void Graph_Display(GraphType *g);

void Queue_init(Queue *q);


//void BFS(int v, int N);

int main(void)

{
	int i;

	GraphType g;
	Queue *q;

	Queue_init(q);
	graph_init(&g);

	//정점삽입

	for (i = 0; i<4; i++)
		insert_vertex(&g, i);

	insert_edge(&g, 0, 1);

	insert_edge(&g, 0, 2);

	insert_edge(&g, 0, 3);

	// insert_edge(&g,1,0);

	// insert_edge(&g,2,0);

	// insert_edge(&g,3,0);

	insert_edge(&g, 1, 2);

	// insert_edge(&g,1,3);

	insert_edge(&g, 2, 3);

	Graph_Display(&g);

//	while (!(isEmpty())
	//	printf("%d ",dequeue());

}

void Queue_init(Queue *q) {
	q->front = q->rear = NULL;
	q->len = 0;
}
//그래프 초기화
void graph_init(GraphType *g)

{
	int v;

	g->n = 0;

	for (v = 0; v<MAX_VERTICES; v++)
		g->adj_list[v] = NULL;
}

//정점 삽입 연산-정점을 삽입하는 연산은 n을 하나 증가하면 된다. 정점의 번호는 순차적으로 증가한다고 가정한다.
void insert_vertex(GraphType *g, int v)
{
	if (((g->n) + 1) > MAX_VERTICES) {
		printf("\n그래프 : 정점의 개수 초과");
		return;
	}
	g->n++;
}

/*간선 삽입 연산 -정점u에 간선(u,v)를 삽입하는 연산은 정점 u의 인접 리스트에 간선을 나타내는 노드를 하나 생성하여 삽입하면 된다. 
위치는 상관이 없으므로 삽입을 쉽게 하기 위하여 연결 리스트의 맨 처음에 삽입하자. 
adj_ist[u]는 초기값이 null이라고 가정.*/
void insert_edge(GraphType *g, int u, int v)
{

	GraphNode *node, *vnode;

	if (u >= g->n || v >= g->n) {
		printf("\n그래프 : 정점번호 오류");
		return;
	}

	node = (GraphNode *)malloc(sizeof(GraphNode));
	node->vertex = v;
	node->next = g->adj_list[u];

	g->adj_list[u] = node;
	//두 방향을 다 연결시키려고 하기 때문에 vnode를 사용한다. (u와 v를 서로연결)

	//한방향만 한다면 vnode를 안쓰면 된다.
	vnode = (GraphNode*)malloc(sizeof(GraphNode));

	vnode->vertex = u;
	vnode->next = g->adj_list[v];
	g->adj_list[v] = vnode;

}

//그래프 출력
void Graph_Display(GraphType *g)
{
	int i;
	GraphNode *tmp;
	for (i = 0; i < g->n; i++) {         //순차적이라서 g->n 이라고 한것이다. 순차적이지 않을땐 생각!!!
		printf("\n\t정점 %c의 인접리스트", i + 65);
		tmp = g->adj_list[i];
		while (tmp != NULL) {
			printf("->%c ", tmp->vertex + 65);//정점 0~4를 A~D로 출력
			tmp = tmp->link;
		}
		printf("\n");
	}
}
/*
void BFS(int v, int N) {
	int front = 0, rear = 0, Pop, i;

	printf("%d ", v);
	queue[0] = v;
	rear++;
	BFSvisit[v] = 1;

	while (front < rear) {
		Pop = queue[front];
		front++;

		for (i = 1; i <= N; i++) {
			if (Graph[Pop][i] == 1 && BFSvisit[i] == 0) {
				printf("%d ", i);
				queue[rear] = i;
				rear++;
				BFSvisit[i] = 1;
			}
		}

	}
}
*/
/*
void enqueue(int data) {
	GraphNode *node = (GraphNode*)malloc(sizeof(GraphNode));
	node->vertex = data;
	node->next = NULL;
	if (isEmpty()) {
		front = rear = node;
	}
	else {
		rear->next = node;
		rear = rear->next;
	}
	len++;
}

int dequeue() {

	if (isEmpty()) {
		cout << "Q is empty" << endl;
		return INF;
	}

	GrpahNode *delNode = front;
	int ret = delNode->data;
	front = delNode->next;
	free(delNode);
	len--;
	return ret;
}
*/